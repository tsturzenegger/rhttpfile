name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up toolchain
        run: rustup toolchain install stable --profile minimal
      - name: Set up cache
        uses: Swatinem/rust-cache@v2
        with: 
          shared-key: "-"
          key: "-"
          cache-all-crates: true
      - name: Build
        run: cargo build --release --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features     

  publish:
      name: Publish for ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      if: github.event_name == 'push'
      strategy:
        matrix:
          include:
            - os: ubuntu-latest
              artifact_name: rhttpfile
              asset_name: rhttpfile-linux-amd64
            - os: windows-latest
              artifact_name: rhttpfile.exe
              asset_name: rhttpfile-windows-amd64.exe
            - os: macos-latest
              artifact_name: rhttpfile
              asset_name: rhttpfile-macos-amd64

      steps:
      - uses: actions/checkout@v4
      - name: Set up toolchain
        run: rustup toolchain install stable --profile minimal
      - name: Set up cache
        uses: Swatinem/rust-cache@v2
        with: 
          shared-key: "-"
          key: "-"
          cache-all-crates: true
      - name: Build
        run: cargo build --release --locked
      - name: Get version
        run: |
          version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$version" >> $GITHUB_ENV
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.TOKEN }}
          file: target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ env.version }}
          overwrite: true
